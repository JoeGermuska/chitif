from django.contrib.gis.db import models
import re

class SluggedModel(models.Model):
    """
    Extend this class to get an automatic slug field and autogenerated slug. We call either the
    'get_slug_text', '__unicode__' or '__str__' methods to get text to slugify, in that order.
    """
    slug = models.SlugField(max_length=80)
    
    class Meta:
        abstract = True
    
    def save(self, force_insert=False, force_update=False):
        self.unique_slug()  
        if self.slug == '': raise ValueError, "Slug may not be blank [%s]" % str(self)
        super(SluggedModel,self).save(force_insert, force_update)                

    def unique_slug(self):
        """
        Customized unique_slug function
        """
        if not getattr(self, "slug"): # if it's already got a slug, do nothing.
            from django.template.defaultfilters import slugify
            if hasattr(self,'get_slug_text') and callable(self.get_slug_text):
                slug_txt = self.get_slug_text()
            elif hasattr(self,'__unicode__'):
                slug_txt = unicode(self)
            elif hasattr(self,'__str__'):
                slug_txt = str(self)
            else:
                return
            slug = slugify(slug_txt)
            itemModel = self.__class__
            # the following gets all existing slug values
            allSlugs = set(sl.values()[0] for sl in itemModel.objects.values("slug"))
            if slug in allSlugs:
                counterFinder = re.compile(r'-\d+$')
                counter = 2
                slug = "%s-%i" % (slug, counter)
                while slug in allSlugs:
                    slug = re.sub(counterFinder,"-%i" % counter, slug)
                    counter += 1
            setattr(self,"slug",slug)

    def fully_qualified_url(self):        
        return get_site_url_root() + self.get_absolute_url()
